// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/issho-ni/issho/internal/pkg/service (interfaces: GRPCClient)

// Package mock_service is a generated GoMock package.
package mock_service

import (
	gomock "github.com/golang/mock/gomock"
	service "github.com/issho-ni/issho/internal/pkg/service"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockGRPCClient is a mock of GRPCClient interface
type MockGRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCClientMockRecorder
}

// MockGRPCClientMockRecorder is the mock recorder for MockGRPCClient
type MockGRPCClientMockRecorder struct {
	mock *MockGRPCClient
}

// NewMockGRPCClient creates a new mock instance
func NewMockGRPCClient(ctrl *gomock.Controller) *MockGRPCClient {
	mock := &MockGRPCClient{ctrl: ctrl}
	mock.recorder = &MockGRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGRPCClient) EXPECT() *MockGRPCClientMockRecorder {
	return m.recorder
}

// ClientConn mocks base method
func (m *MockGRPCClient) ClientConn() *grpc.ClientConn {
	ret := m.ctrl.Call(m, "ClientConn")
	ret0, _ := ret[0].(*grpc.ClientConn)
	return ret0
}

// ClientConn indicates an expected call of ClientConn
func (mr *MockGRPCClientMockRecorder) ClientConn() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientConn", reflect.TypeOf((*MockGRPCClient)(nil).ClientConn))
}

// HealthCheck mocks base method
func (m *MockGRPCClient) HealthCheck() *service.GRPCStatus {
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(*service.GRPCStatus)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck
func (mr *MockGRPCClientMockRecorder) HealthCheck() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockGRPCClient)(nil).HealthCheck))
}
